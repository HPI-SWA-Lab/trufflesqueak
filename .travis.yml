language: java

sudo: required
dist: bionic

python:
  - "2.7"

aliases:
  - &initialize-environment
    |
      GIT_DESCRIBE=$(git describe --tags)
      GIT_SHORT_COMMIT=$(git log -1 --format="%h")
      GIT_DESCRIPTION="${GIT_DESCRIBE:-${GIT_SHORT_COMMIT}}"
      export INSTALLABLE_TARGET="graalsqueak-installable-${OS_NAME}-${TRAVIS_CPU_ARCH}-${GIT_DESCRIPTION}-for-GraalVM-${GRAALVM_VERSION}.jar"
      export MX_PATH=${TRAVIS_BUILD_DIR}/../mx
      git clone --depth 1 https://github.com/graalvm/mx.git ${MX_PATH}
      export PATH=${PATH}:${MX_PATH}
      source scripts/helpers.sh
      shallow_clone https://github.com/oracle/graal.git "vm-${GRAALVM_VERSION}" "${TRAVIS_BUILD_DIR}/../graal"
      shallow_clone https://github.com/graalvm/graaljs.git "vm-${GRAALVM_VERSION}" "${TRAVIS_BUILD_DIR}/../graaljs"
      ensure_test_image_64bit "${TRAVIS_BUILD_DIR}/images"
      export JVMCI_HOME="$(download_openjdk8_jvmci ~/)"
      export JAVA_HOME="${JVMCI_HOME}"
      export PATH=${PATH}:${JVMCI_HOME}/bin
  - &install-pylint
    |
      virtualenv ~/venv
      source ~/venv/bin/activate
      pip install astroid==1.1.0
      pip install pylint==1.1.0
  - &download-eclipse
    |
      pushd ${TRAVIS_BUILD_DIR}/.. > /dev/null
      local eclipse_tar="ci-dep-eclipse-SDK-4.5.2-linux-gtk-x86_64.tar.gz"
      download_assert "${eclipse_tar}" 0.8.0
      tar -xzf ${eclipse_tar}
      export ECLIPSE_EXE=$(pwd)/eclipse/eclipse # required by mx
      popd > /dev/null
  - &download-ecj
    |
      export JDT=${MX_PATH}/ecj.jar # required by mx
      download_assert "ci-dep-ecj-4.5.2.jar" 0.8.0 "${JDT}"
  - &report-coverage
    before_script:
      - export MX_GATE_OPTS="--jacocout coverage"
      - curl -sSL --retry 3 -o ~/codacy-coverage-reporter.jar "https://github.com/codacy/codacy-coverage-reporter/releases/download/4.0.3/codacy-coverage-reporter-4.0.3-assembly.jar"
    after_success:
      - bash <(curl -s https://codecov.io/bash)
      - java -jar ~/codacy-coverage-reporter.jar report -l Java -r jacoco.xml
  - &deploy-component
      deploy:
        provider: releases
        api_key:
          secure: $GITHUB_TOKEN
        file_glob: true
        file: graalsqueak-installable*.jar
        skip_cleanup: true
        on:
          tags: true

before_install: *initialize-environment

script:
  - mx --disable-polyglot --dy ${MX_DY} gate ${MX_GATE_OPTS} --strict-mode --tags ${GATE}
  - mx --env ce-graalsqueak build
  - cp $(mx --env ce-graalsqueak paths SMALLTALK_INSTALLABLE_SVM_JAVA8) "${INSTALLABLE_TARGET}"
  - export GRAALVM_HOME="$(download_graalvm_ce ~/)"
  - ${GRAALVM_HOME}/bin/gu install -L "${INSTALLABLE_TARGET}"
  - "${GRAALVM_HOME}/bin/graalsqueak --jvm --code \"String streamContents: [:s | SystemReporter new reportVM: s] limitedTo: 10000\" images/test-64bit.image"
  - "${GRAALVM_HOME}/bin/graalsqueak --native --code \"String streamContents: [:s | SystemReporter new reportVM: s] limitedTo: 10000\" images/test-64bit.image"
  - ${GRAALVM_HOME}/bin/graalsqueak --jvm --code "1 tinyBenchmarks" images/test-64bit.image
  - ${GRAALVM_HOME}/bin/graalsqueak --native --code "1 tinyBenchmarks" images/test-64bit.image

jobs:
  include:
    - name: "Checkstyle and Spotbugs"
      env: GATE="style,fullbuild"
      addons:
        apt:
          packages: # pylint dependencies
            - python-pip
            - python-virtualenv
      install:
        - export JAVA_HOME="$(download_openjdk8_jvmci ~/)"
        - *install-pylint
        - *download-eclipse
        - *download-ecj
      script: mx gate --strict-mode --tags ${GATE}
    - name: "Build and test on Linux with code coverage"
      env: GATE="build,test" MX_DY="/graal-js"
      addons:
        apt:
          packages:
            - libsdl2-dev
      <<: *report-coverage
      <<: *deploy-component
    - name: "Build and test on macOS with Graal compiler"
      os: osx
      osx_image: xcode11.2 # Use macOS Mojave
      env: GATE="build,test" MX_DY="/graal-js,/compiler"
      before_install:
        - *initialize-environment
        - HOMEBREW_NO_AUTO_UPDATE=1 brew install sdl2
      <<: *deploy-component
    - name: "Build and test on Windows"
      os: windows
      language: c
      before_install:
        - choco install --no-progress python
        - *initialize-environment
      script:
        - cmd.exe /C '"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" amd64 &&
          python ../mx/mx.py gate --strict-mode --tags build,test'
        - cmd.exe /C '"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" amd64 &&
          python ../mx/mx.py --env ce-graalsqueak --dy /vm --force-bash-launchers=true build'
        - cmd.exe /C '"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" amd64 &&
          python ../mx/mx.py --env ce-graalsqueak --dy /vm --force-bash-launchers=true paths SMALLTALK_INSTALLABLE_BGRAALSQUEAK.EXE_JAVA8'
        - cp /c/Users/travis/build/hpi-swa/graal/sdk/mxbuild/windows-amd64/dists/smalltalk-installable-bgraalsqueak.exe-java8.jar "${INSTALLABLE_TARGET}"
        - export GRAALVM_HOME="$(download_graalvm_ce ~/)"
        # `gu` tool not yet support on Windows, unzip installable for now
        # - gu install -L "${INSTALLABLE_TARGET}"
        - unzip "${INSTALLABLE_TARGET}" -d ${GRAALVM_HOME}
        - "${GRAALVM_HOME}/bin/graalsqueak.cmd --code \"String streamContents: [:s | SystemReporter new reportVM: s] limitedTo: 10000\" images/test-64bit.image"
        - ${GRAALVM_HOME}/bin/graalsqueak.cmd --code "1 tinyBenchmarks" images/test-64bit.image
      <<: *deploy-component
  fast_finish: true
